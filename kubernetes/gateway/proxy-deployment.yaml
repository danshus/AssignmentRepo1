apiVersion: v1
kind: Namespace
metadata:
  name: gateway
  labels:
    name: gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy-service
  namespace: gateway
  labels:
    app: proxy-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: proxy-service
  template:
    metadata:
      labels:
        app: proxy-service
    spec:
      containers:
      - name: proxy-service
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: NGINX_HOST
          value: "0.0.0.0"
        - name: NGINX_PORT
          value: "80"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: proxy-nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-nginx-config
  namespace: gateway
data:
  nginx.conf: |
    upstream backend {
        server backend-service.backend.svc.cluster.local:80;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /health {
            return 200 "proxy healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /proxy-info {
            return 200 "This is the gateway proxy service\n";
            add_header Content-Type text/plain;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: proxy-service
  namespace: gateway
  labels:
    app: proxy-service
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
    protocol: TCP
    name: http
  selector:
    app: proxy-service
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy-network-policy
  namespace: gateway
spec:
  podSelector:
    matchLabels:
      app: proxy-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: backend
    ports:
    - protocol: TCP
      port: 80
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53 